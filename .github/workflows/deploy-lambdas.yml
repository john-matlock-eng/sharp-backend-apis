name: Deploy Lambdas

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  TF_STATE_BUCKET: ${{ vars.TF_STATE_BUCKET }}
  BACKEND_TF_DYNAMODB_TABLE_NAME: ${{ vars.BACKEND_TF_DYNAMODB_TABLE_NAME }}

permissions:
  id-token: write
  contents: read

jobs:
  lambda-discovery:
    runs-on: ubuntu-latest
    outputs:
      lambda_folders: ${{ steps.set-lambda-folders.outputs.lambda_folders }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Discover Lambda folders
      id: discover-lambdas
      run: |
        lambda_folders=$(find ./lambdas -maxdepth 1 -mindepth 1 -type d | sed 's|./lambdas/|"|' | sed 's|$|"|' | jq -R -s -c 'split("\n")[:-1]')
        echo "lambda_folders=$lambda_folders" >> $GITHUB_ENV
        echo "lambda_folders=$lambda_folders" # Debug output to verify correctness

    - name: Set Output for Lambda Folders
      id: set-lambda-folders
      run: echo "lambda_folders=${{ env.lambda_folders }}" >> $GITHUB_OUTPUT

    - name: Debug - Print Lambda Folders
      run: |
        echo "lambda_folders: ${{ env.lambda_folders }}" # Debugging purposes

  create-ecr:
    needs: lambda-discovery
    runs-on: ubuntu-latest

    strategy:
      matrix:
        lambda_folder: ${{ fromJson(needs.lambda-discovery.outputs.lambda_folders) }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.API_DEPLOY_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Initialize Terraform for ECR
      run: |
        terraform init -backend-config="bucket=${{ env.TF_STATE_BUCKET }}" -backend-config="key=lambdas/modules/ecr/${{ matrix.lambda_folder }}/terraform.tfstate" -backend-config="region=${{ env.AWS_REGION }}" -backend-config="encrypt=true"
      working-directory: ./terraform/lambdas/modules/ecr

    - name: Plan Terraform for ECR
      id: terraform_plan_ecr
      run: terraform plan -var="lambda_name=${{ matrix.lambda_folder }}" -var="aws_region=${{ env.AWS_REGION }}" -out=tfplan.txt
      working-directory: ./terraform/lambdas/modules/ecr

    - name: Apply Terraform for ECR
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        terraform apply -auto-approve tfplan.txt
      working-directory: ./terraform/lambdas/modules/ecr

  build-and-deploy:
    needs: lambda-discovery
    runs-on: ubuntu-latest

    strategy:
      matrix:
        lambda_folder: ${{ fromJson(needs.lambda-discovery.outputs.lambda_folders) }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.API_DEPLOY_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Log in to Amazon ECR
      run: |
        aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

    - name: Build Docker image
      run: |
        docker build -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ matrix.lambda_folder }}:${{ github.sha }} -f ./lambdas/${{ matrix.lambda_folder }}/Dockerfile .

    - name: Build and Push Docker image
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        docker build -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ matrix.lambda_folder }}:${{ github.sha }} -f ./lambdas/${{ matrix.lambda_folder }}/Dockerfile . --push

    - name: Read Lambda Config
      id: read_config
      run: |
        config_path="./lambdas/${{ matrix.lambda_folder }}/lambda_config.json"
        if [ -f "$config_path" ]; then
          memory_size=$(jq -r '.memory_size' "$config_path")
          timeout=$(jq -r '.timeout' "$config_path")
          architecture=$(jq -r '.architecture' "$config_path")
          env_vars=$(jq -r '.environment_variables | @json' "$config_path")  # Serialize to JSON
    
          echo "memory_size=$memory_size" >> $GITHUB_ENV
          echo "timeout=$timeout" >> $GITHUB_ENV
          echo "architecture=$architecture" >> $GITHUB_ENV
          echo "env_vars=$env_vars" >> $GITHUB_ENV
        else
          echo "Config file not found, using defaults."
        fi
      shell: bash

    - name: Initialize Terraform for Lambda
      run: terraform init -backend-config="bucket=${{ env.TF_STATE_BUCKET }}" -backend-config="key=lambdas/${{ matrix.lambda_folder }}/terraform.tfstate" -backend-config="region=${{ env.AWS_REGION }}" -backend-config="encrypt=true"
      working-directory: ./terraform/lambdas

    - name: Plan Terraform for Lambda
      id: terraform_plan_lambda
      run: |
        plan_command="terraform plan -var=\"aws_region=${{ env.AWS_REGION }}\" -var=\"lambda_name=${{ matrix.lambda_folder }}\" -var=\"image_tag=${{ github.sha }}\" -var=\"dynamodb_table_name=${{ secrets.DYNAMODB_TABLE_NAME }}\""
    
        if [ -n "${{ env.architecture }}" ]; then
          plan_command="$plan_command -var=\"architecture=${{ env.architecture }}\""
        fi
    
        if [ -n "${{ env.memory_size }}" ]; then
          plan_command="$plan_command -var=\"memory_size=${{ env.memory_size }}\""
        fi
    
        if [ -n "${{ env.timeout }}" ]; then
          plan_command="$plan_command -var=\"timeout=${{ env.timeout }}\""
        fi
    
        if [ -n "${{ env.env_vars }}" ]; then
          plan_command="$plan_command -var='environment_variables=${{ env.env_vars }}'"
        fi
    
        plan_command="$plan_command -out=tfplan.txt"
    
        echo "Running Terraform plan: $plan_command"
        eval $plan_command
      working-directory: ./terraform/lambdas

    - name: Apply Terraform for Lambda
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: terraform apply -auto-approve tfplan.txt
      working-directory: ./terraform/lambdas
