name: Deploy Lambdas

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  TF_STATE_BUCKET: ${{ vars.TF_STATE_BUCKET }}
  BACKEND_TF_DYNAMODB_TABLE_NAME: ${{ vars.BACKEND_TF_DYNAMODB_TABLE_NAME }}

permissions:
  id-token: write
  contents: read

jobs:
  lambda-discovery:
    runs-on: ubuntu-latest
    outputs:
      lambda_folders: ${{ steps.set-output.outputs.lambda_folders }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Discover Lambda folders
      id: discover-lambdas
      run: |
        lambda_folders=$(find ./lambdas -maxdepth 1 -mindepth 1 -type d -printf '%f\n' | jq -R -s -c 'split("\n")[:-1]')
        echo "LAMBDA_FOLDERS=$lambda_folders" >> $GITHUB_ENV

    - name: Set output
      id: set-output
      run: echo "lambda_folders=$LAMBDA_FOLDERS" >> $GITHUB_OUTPUT

    - name: Debug - Print Lambda Folders
      run: |
        echo "lambda_folders: ${{ steps.set-output.outputs.lambda_folders }}"

  create-ecr:
    needs: lambda-discovery
    runs-on: ubuntu-latest
    if: ${{ fromJson(needs.lambda-discovery.outputs.lambda_folders)[0] }}

    strategy:
      matrix:
        lambda_folder: ${{ fromJson(needs.lambda-discovery.outputs.lambda_folders) }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.API_DEPLOY_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Create Terraform cache directory
      run: mkdir -p ~/.terraform.d/plugin-cache

    - name: Check Terraform cache directory
      run: ls -la ~/.terraform.d/

    - name: Cache Terraform
      uses: actions/cache@v3
      with:
        path: ~/.terraform.d/plugin-cache
        key: ${{ runner.os }}-terraform-${{ hashFiles('**/.terraform.lock.hcl') }}
        restore-keys: |
          ${{ runner.os }}-terraform-

    - name: Initialize Terraform for ECR
      run: |
        terraform init \
          -plugin-dir=~/.terraform.d/plugin-cache \
          -backend-config="bucket=${{ env.TF_STATE_BUCKET }}" \
          -backend-config="key=lambdas/modules/ecr/${{ matrix.lambda_folder }}/terraform.tfstate" \
          -backend-config="region=${{ env.AWS_REGION }}" \
          -backend-config="dynamodb_table=${{ env.BACKEND_TF_DYNAMODB_TABLE_NAME }}" \
          -backend-config="encrypt=true"
      working-directory: ./terraform/lambdas/modules/ecr

    - name: Plan Terraform for ECR
      id: terraform_plan_ecr
      run: terraform plan -var="lambda_name=${{ matrix.lambda_folder }}" -var="aws_region=${{ env.AWS_REGION }}" -out=tfplan.txt
      working-directory: ./terraform/lambdas/modules/ecr

    - name: Apply Terraform for ECR
      run: |
        terraform apply -auto-approve tfplan.txt
      working-directory: ./terraform/lambdas/modules/ecr

  build-and-deploy:
    needs: [lambda-discovery, create-ecr]
    runs-on: ubuntu-latest
    if: ${{ fromJson(needs.lambda-discovery.outputs.lambda_folders)[0] }}

    strategy:
      matrix:
        lambda_folder: ${{ fromJson(needs.lambda-discovery.outputs.lambda_folders) }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.API_DEPLOY_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ matrix.lambda_folder }}-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-${{ matrix.lambda_folder }}-

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.lambda_folder }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.lambda_folder }}-

    - name: Copy Lambda-specific Terraform config
      run: |
        cp ./lambdas/${{ matrix.lambda_folder }}/terraform/config.tfvars ./terraform/lambdas/
      working-directory: .

    - name: Log in to Amazon ECR
      run: |
        aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

    - name: Build Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./lambdas/${{ matrix.lambda_folder }}/Dockerfile
        push: false
        tags: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ matrix.lambda_folder }}:${{ github.sha }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

    - name: Push Docker image to ECR
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./lambdas/${{ matrix.lambda_folder }}/Dockerfile
        push: true
        tags: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ matrix.lambda_folder }}:${{ github.sha }}
        cache-from: type=local,src=/tmp/.buildx-cache
  
    - name: Move cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache

    - name: Create Terraform cache directory
      run: mkdir -p ~/.terraform.d/plugin-cache

    - name: Check Terraform cache directory
      run: ls -la ~/.terraform.d/

    - name: Initialize Terraform for Lambda
      run: |
        terraform init \
          -plugin-dir=~/.terraform.d/plugin-cache \
          -backend-config="bucket=${{ env.TF_STATE_BUCKET }}" \
          -backend-config="key=lambdas/${{ matrix.lambda_folder }}/terraform.tfstate" \
          -backend-config="region=${{ env.AWS_REGION }}" \
          -backend-config="dynamodb_table=${{ env.BACKEND_TF_DYNAMODB_TABLE_NAME }}" \
          -backend-config="encrypt=true"
      working-directory: ./terraform/lambdas

    - name: Plan Terraform for Lambda
      id: terraform_plan_lambda
      run: |
        terraform plan -var="image_tag=${{ github.sha }}" -var-file="config.tfvars" -out=tfplan.txt
      working-directory: ./terraform/lambdas

    - name: Apply Terraform for Lambda
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: terraform apply -auto-approve tfplan.txt
      working-directory: ./terraform/lambdas

    - name: Save cache
      uses: actions/cache/save@v3
      if: always()
      with:
        path: |
          /tmp/.buildx-cache
          ~/.cache/pip
          ~/.terraform.d/plugin-cache
        key: ${{ runner.os }}-cache-${{ github.sha }}
