name: Deploy APIs

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  BACKEND_TF_DYNAMODB_TABLE_NAME: ${{ vars.BACKEND_TF_DYNAMODB_TABLE_NAME }}
  TF_STATE_BUCKET: ${{ vars.TF_STATE_BUCKET }}

permissions:
  id-token: write
  contents: read

jobs:
  api-discovery:
    runs-on: ubuntu-latest
    outputs:
      api_folders: ${{ steps.api_discovery.outputs.api_folders }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Discover API folders
      id: api_discovery
      run: |
        if [ -d "./apis" ]; then
          api_folders=$(find ./apis -maxdepth 1 -mindepth 1 -type d | sed 's|./apis/||' | jq -R -s -c 'split("\n")[:-1]')
        else
          api_folders="[]"
        fi
        echo "api_folders=$api_folders" >> $GITHUB_ENV
        echo "api_folders=$api_folders" > $GITHUB_OUTPUT
        echo "Debug: $api_folders"
      shell: bash

  build-and-deploy:
    needs: api-discovery
    runs-on: ubuntu-latest

    strategy:
      matrix:
        api_folder: ${{ fromJson(needs.api-discovery.outputs.api_folders) }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.API_DEPLOY_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Install Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Initialize Terraform for ECR
      run: |
        terraform init -backend-config="bucket=${{ env.TF_STATE_BUCKET }}" -backend-config="key=apis/ecr/${{ matrix.api_folder }}/terraform.tfstate" -backend-config="region=${{ env.AWS_REGION }}" -backend-config="dynamodb_table=${{ env.BACKEND_TF_DYNAMODB_TABLE_NAME }}" -backend-config="encrypt=true"
      working-directory: ./terraform/apis/ecr

    - name: Plan Terraform for ECR
      id: terraform_plan_ecr
      run: terraform plan -var="api_name=${{ matrix.api_folder }}" -var="aws_region=${{ env.AWS_REGION }}" -out=tfplan.txt
      working-directory: ./terraform/apis/ecr

    - name: Apply Terraform for ECR
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        terraform apply -auto-approve tfplan.txt
      working-directory: ./terraform/apis/ecr

    - name: Log in to Amazon ECR
      run: |
        aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

    - name: Build Docker image
      if: github.event_name == 'pull_request'
      run: |
        docker build -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ matrix.api_folder }}:${{ github.sha }} -f ./apis/${{ matrix.api_folder }}/Dockerfile .

    - name: Build and Push Docker image
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        docker build -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ matrix.api_folder }}:${{ github.sha }} -f ./apis/${{ matrix.api_folder }}/Dockerfile . --push

    - name: Initialize Terraform
      run: |
        terraform init -backend-config="bucket=${{ env.TF_STATE_BUCKET }}" -backend-config="key=apis/${{ matrix.api_folder }}/terraform.tfstate" -backend-config="region=${{ env.AWS_REGION }}" -backend-config="dynamodb_table=${{ env.BACKEND_TF_DYNAMODB_TABLE_NAME }}" -backend-config="encrypt=true"
      working-directory: ./terraform/apis

    - name: Validate Terraform
      run: terraform validate
      working-directory: ./terraform/apis

    - name: Plan Terraform
      id: terraform_plan
      run: terraform plan -var="aws_region=${{ env.AWS_REGION }}" -var="api_name=${{ matrix.api_folder }}" -var="image_tag=${{ github.sha }}" -out=tfplan.txt
      working-directory: ./terraform/apis

    - name: Apply Terraform
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: terraform apply -auto-approve tfplan.txt
      working-directory: ./terraform/apis
